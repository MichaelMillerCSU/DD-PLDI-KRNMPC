clc
clear
close all
r = randi(2000)
% 1147
rng(1147)
n = 2;
m = 1;
Nd = 15;
NK = n;
Det = [];
Eig = [];
P_i = [];


% f_u =  @(t,x,u)([ x(2,:) ; 4 * 9.8 * sin(x(1,:)) + 3 * u * cos(x(1, :))] );
% f_u =  @(t,x,u)(-[ -2*x(2,:) ; 0.8*x(1,:) + 3*x(1,:).^2.*x(2,:) - 1*x(2,:) - u] );
% f_u =  @(t,x,u)([ x(2,:) ; -1*x(2, :) + 2 * x(1, :) - 2 * x(1, :).^3 + u] );
% f_u =  @(t,x,u)(-[ -2*x(2,:) ; 2*x(1,:) + 3*x(1,:).^2.*x(2,:) - 0.8*x(2,:) - u]);

% % Inverted Pendulm
% MM = 0.0762;
% g = 9.80;
% J = 2.44e-4;
% Km = 10.51;
% l = 0.041;
% tau = 0.398;
% f_u =  @(t,x,u)([ x(2,:) ;  MM * g * l / J * sin(x(1,:)) - 1 / tau * x(2, :) + Km / tau * u] );
% f_u =  @(t,x,u)(-[ -x(2,:) ; 1*x(1,:) + 1*x(1,:).^2.*x(2,:) - 1 * x(2,:) - u]);
% f_u =  @(t,x,u)(-[ -2*x(2,:) ; 1*x(1,:) + 3*x(1,:).^2.*x(2,:) - 0.8*x(2,:) - u]);

% RotationalRobotic Manipulator System


% MM = 0.0292;
% Tc = 0.416;
% Ts = 0.4657;
% kappa = 1000;
% vs = 0.2;
% sigma = 0.0135;
% BB = 16;
% Cc = @(x) Tc * 2 / pi * atan(kappa * x);
% Cs = @(x) (Ts - Tc) * exp(- (x / vs)^2) * 2 / pi * atan(kappa * x);
% Cv = @(x) sigma * x;
% f_u =  @(t,x,u)([ x(2,:) ;  -inv(MM) * (Cc(x(2, :)) + Cs(x(2, :)) + Cv(x(2, :))) + inv(MM) * BB * u] );




% Duff
f_u =  @(t,x,u)([ x(2,:) ; -1*x(2, :) + 2 * x(1, :) - 2 * x(1, :).^3 + u] );
% VDP
% f_u =  @(t,x,u)(-[ -2*x(2,:) ; 0.8*x(1,:) + 3*x(1,:).^2.*x(2,:) - 1*x(2,:) - u] );
% f_u =  @(t,x,u)(-[ -2*x(2,:) ; 1*x(1,:) + 3*x(1,:).^2.*x(2,:) - 0.8*x(2,:) - u]);
% f_u =  @(t,x,u)(-[ -1*x(2,:) ; 1*x(1,:) + 2*x(1,:).^2.*x(2,:) - 2*x(2,:) - u]);

deltaT = 0.01;
%Runge-Kutta 4
k1 = @(t,x,u) (  f_u(t,x,u) );
k2 = @(t,x,u) ( f_u(t,x + k1(t,x,u)*deltaT/2,u) );
k3 = @(t,x,u) ( f_u(t,x + k2(t,x,u)*deltaT/2,u) );
k4 = @(t,x,u) ( f_u(t,x + k1(t,x,u)*deltaT,u) );
f_ud = @(t,x,u) ( x + (deltaT/6) * ( k1(t,x,u) + 2*k2(t,x,u) + 2*k3(t,x,u) + k4(t,x,u)  )   );


%% Koopman informed Initial Value of the Model
Total_Times = 1000;
Koopman_AB = {};
Continuous_Koopman_A = {};
Continuous_Koopman_B = {};
Start_points = [];
for times = 1 : Total_Times
    Koopman_X = [];
    Koopman_U = [];
    Koopman_Y = [];
%     Ns = randi([10, 20]);
    Ns = 3;
    Nt = 20;
    segment = 4 / Total_Times;
    start_points = -2 + (times - 1) * segment;
    Start_points = [Start_points start_points];
    for k = 1 : Nt
        x = start_points + 2 * segment * rand(n, 1) - segment;
        for i = 1 : Ns
            u = 40 * rand - 20;
            x_next = f_ud(0, x, u);
            Koopman_X = [Koopman_X x];
            Koopman_Y = [Koopman_Y x_next];
            Koopman_U = [Koopman_U u];
            x = x_next;
        end
    end
    Koopman_AB{times} = Koopman_Y * [Koopman_X; Koopman_U]' * pinv([Koopman_X; Koopman_U] * [Koopman_X; Koopman_U]')
    Continuous_Koopman_A{times} = (Koopman_AB{times}(1 : n, 1 : n) - eye(n, n)) / deltaT;
    Continuous_Koopman_B{times} = Koopman_AB{times}(1 : n, n + 1 : n + m) / deltaT;
end

minus_Koopman_AB = {};

for i = 1 : Total_Times - 1
    for j = i + 1 : Total_Times
        minus_Koopman_AB{i} = Koopman_AB{i} - Koopman_AB{j};
    end
end

LDI_Koopman_Max = zeros(size(Koopman_AB{1}));
LDI_Koopman_Min = zeros(size(Koopman_AB{1}));


for j = 1 : n
    for k = 1 : n + m
        max_element = -1e9;
        min_element = 1e9;
        for i = 1 : Total_Times
            if max_element < Koopman_AB{i}(j, k)
                max_element = Koopman_AB{i}(j, k);
            end
            if min_element > Koopman_AB{i}(j, k)
                min_element = Koopman_AB{i}(j, k);
            end
        end
        LDI_Koopman_Max(j, k) = max_element;
        LDI_Koopman_Min(j, k) = min_element;
    end
end

LDI_Koopman_Max
LDI_Koopman_Min
A = {};
B = {};


A = {};
for k = 1 : Nd
    for i = 1 : n
        for j = 1 : n
            A{k}(i, j) = LDI_Koopman_Min(i, j) + (LDI_Koopman_Max(i, j) - LDI_Koopman_Min(i, j)) * randi([0, 1]);
        end
    end
end


B = {};
for k = 1 : Nd
    for i = 1 : n
        for j = n + 1 : n + m
            B{k}(i, j - n) = LDI_Koopman_Min(i, j) + (LDI_Koopman_Max(i, j) - LDI_Koopman_Min(i, j)) * randi([0, 1]);
        end
    end
end
% A{Nd + 1} = diag(0 * ones(n, 1));
% B{Nd + 1} = 0 * ones(n, 1);

Nd_temp = 2 * Nd;

for i = Nd + 1 : Nd_temp
    A{i} = -A{i - Nd};
    B{i} = -B{i - Nd};
end


A{Nd_temp + 1} = diag(0 * ones(n, 1));
B{Nd_temp + 1} = 0 * ones(n, 1);
Nd = Nd_temp + 1;

AB = {};
for i = 1 : Nd
    AB{i} = [A{i} B{i}];
end


%% Polytopic Modelling Validation

% Nd = size(A, 2);
e = [];
index_identification = 1;

epsilon = 0;
eta = 1;
cnt = 0;
cnt_OK = 0;
N = 200;
uu = 0.2 * rand(N, m) - 0.1;
states = 100;
Epsilon = [];
while cnt_OK <= 3
    epsilon = 0;
    for k = 1 : states
        Tspan = (1 : N) * deltaT;
        
        x = 4 * rand(2, 1) - 2;
        x_rec = x;
        X_test = [x];
        X_recon_test = [x_rec];
        U = [];


%         figure
        for i = 1 : N
            w = 0;
            u = 4 * rand - 2;
            for j = 1 : Nd
                x_candidate{j} = A{j} * x_rec + B{j} * u;
            end
            w = 0;
            x_next = f_ud(0, x, u) + w;
        %     M = cell2mat(AB);
        %     M = Plot_Mapping;
            M = cell2mat(x_candidate);
            p_i = lsqlin(M, x_next, -eye(size(M, 2), size(M, 2))  , zeros(size(M, 2), 1),  ones(1, size(M, 2)), 1);
            epsilon = epsilon + M * p_i - x_next;
        %     p_i = lsqlin(M, vec(A_B), -eye(size(M, 2), size(M, 2)), zeros(size(M, 2), 1),  ones(1, size(M, 2)), 1);
            
%             if mod(i, 10) == 0
%                 P = M';
%                 vertices = convhull(P);
%                 plot3(i * ones(size(P(vertices, 1), 1)), P(vertices, 1), P(vertices, 2), 'LineWidth', 2)
%             end
%             hold on
%             scatter3(i, x_next(1), x_next(2), 'black', 'filled')
%             xlabel('Steps');
%             ylabel('$x_1$', 'Interpreter','latex');
%             zlabel('$x_2$', 'Interpreter','latex');
            
    %         pause(0.05)
        
            P_i = [P_i p_i];
            A_Nd = cell2mat(A);
            B_Nd = cell2mat(B);
            A_Rec = A_Nd * kron(p_i, eye(n));
            B_Rec = B_Nd * p_i;
            e = [e M * p_i - x_next];
        
        %     A_B_Rec = reshape(M * p_i, [n, n + m]);
        %     A_Rec = A_B_Rec(1 : n, 1 : n);
        %     B_Rec = A_B_Rec(1 : n, n + 1 : n + m);
        %     e = [e M * p_i - vec(A_B)]
        
            A_Rec_Set{i} = A_Rec;
            B_Rec_Set{i} = B_Rec;
            x_rec = A_Rec * x_rec + B_Rec * u ;
            X_test = [X_test x_next];
            X_recon_test = [X_recon_test x_rec];
            U = [U u];
            x = x_next;
        end
        k
    end
    total_error = norm(epsilon)
    Epsilon = [Epsilon norm(epsilon)];
    if norm(epsilon) <=  0.1
       cnt_OK = cnt_OK + 1;
    else
       eta = eta + 0.001;
    end

    cnt = cnt + 1;
 
    
    % CDC Approach
    randomized_index = randi((Nd - 1) / 2);
    AB{randomized_index} = eta * AB{randomized_index};
    
    

    for i = (Nd - 1) / 2 + 1 : Nd - 1
        AB{i} = -1 * AB{i - (Nd - 1) / 2};
    end

    for i = 1 : Nd
        A{i} = 1 * AB{i}(1 : n, 1 : n);
        B{i} = 1 * AB{i}(1 : n, n + 1 : n + m);
    end
        



    figure
    mesh(deltaT * (1 : size(P_i, 2)), 1 : size(M, 2), P_i)
    xlabel('Time(sec)')
    ylabel('i-th vertex')
    zlabel('p_i')
    
    
    
    figure
    plot(X_test(1, :))
    hold on 
    plot(X_recon_test(1, :))
    legend('Original', 'LPV')
    ylabel('$x_1$', 'Interpreter','latex')
    
    
    figure
    plot(X_test(2, :))
    hold on 
    plot(X_recon_test(2, :))
    legend('Original', 'LPV')
    ylabel('$x_2$', 'Interpreter','latex')
    

    
    now_error = norm(X_test - X_recon_test) / N

end

figure
plot(Epsilon)
ylabel('$\epsilon$', 'Interpreter','latex')

% figure
% Plot_Mapping = cell2mat(linear_mapping_Nonlinear);
% for i = 1 : n * (n + m)
%     plot(Plot_Mapping(i, :))
%     hold on
% end
% legend('1', '2', '3', '4', '5', '6')
% save('Plot_Mapping.mat', 'Plot_Mapping', 'linear_mapping_Nonlinear_A', 'linear_mapping_Nonlinear_B')

%%   Control - Feedback Control 
x = [-0.5; 1];
xd = [0; 0];
X = [x];
Xd = [xd];
U_Set = [];
d = 4 * rand(n, Nd) - 2;

[P_all_equal, mu_s_all_equal, mu_all_equal, K_equal_gain, second_P] = all_equal_gain(A(1: Nd), B(1: Nd), d);

R_Static = chol(inv(P_all_equal));
t = 0 : 0.001 : 2 * pi + 0.3;
XX = inv(R_Static) * [cos(t); sin(t)];
plot(XX(1, :), XX(2, :), 'LineWidth', 5.0, 'LineStyle','-.');



[K, nosolution_flag, Q,~,~] = getOptimalGain(x, A(1: Nd), B(1: Nd), d);

figure
R = chol(inv(Q));
t = 0 : 0.001 : 2 * pi + 0.3;
XX = inv(R) * [cos(t); sin(t)];
plot(XX(1, :), XX(2, :));
hold on
grid on

for i = 1 : 2000
    if nosolution_flag == 1
        error('Infeasible!')
    end
%     xd = [0.05 * sin(i * deltaT); 0.05 * 1 / 100 * cos(i * deltaT)];
%     if i >= 10
%         f_u =  @(t,x,u)(-[ -2*x(2,:) ; 1*x(1,:) + 3*x(1,:).^2.*x(2,:) - 0.8*x(2,:) - u]);
%         k1 = @(t,x,u) (  f_u(t,x,u) );
%         k2 = @(t,x,u) ( f_u(t,x + k1(t,x,u)*deltaT/2,u) );
%         k3 = @(t,x,u) ( f_u(t,x + k2(t,x,u)*deltaT/2,u) );
%         k4 = @(t,x,u) ( f_u(t,x + k1(t,x,u)*deltaT,u) );
%         f_ud = @(t,x,u) ( x + (deltaT/6) * ( k1(t,x,u) + 2*k2(t,x,u) + 2*k3(t,x,u) + k4(t,x,u)  )   );
%     end
    u = K * (x - xd);
    U_Set = [U_Set u];
%     w = 0.01 * rand * x;
    w = 0;
    x = f_ud(0, x, u) + w
    X = [X x];
    Xd = [Xd xd];

end

figure
plot(deltaT * (1 : size(X, 2)), X(1, :))
hold on
plot(deltaT * (1 : size(Xd, 2)), Xd(1, :))


figure
plot(deltaT * (1 : size(X, 2)), X(2, :))

figure
plot(deltaT * (1 : size(U_Set, 2)), U_Set(:))




















